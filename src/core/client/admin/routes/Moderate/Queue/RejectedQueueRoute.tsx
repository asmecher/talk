import { Localized } from "@fluent/react/compat";
import React, { FunctionComponent, useCallback, useState } from "react";
import { graphql, RelayPaginationProp } from "react-relay";

import parseModerationOptions from "coral-framework/helpers/parseModerationOptions";
import { IntersectionProvider } from "coral-framework/lib/intersection";
import { withPaginationContainer } from "coral-framework/lib/relay";
import { resolveModule } from "coral-framework/lib/relay/helpers";

import { RejectedQueueRoute_query } from "coral-admin/__generated__/RejectedQueueRoute_query.graphql";
import { RejectedQueueRoutePaginationQueryVariables } from "coral-admin/__generated__/RejectedQueueRoutePaginationQuery.graphql";

import EmptyMessage from "./EmptyMessage";
import LoadingQueue from "./LoadingQueue";
import Queue from "./Queue";

interface RejectedQueueRouteProps {
  query: RejectedQueueRoute_query;
  relay: RelayPaginationProp;
  storyID?: string;
  siteID?: string;
  section?: string | null;
}

// TODO: use generated types
const danglingLogic = (status: string) => ["APPROVED"].includes(status);

export const RejectedQueueRoute: FunctionComponent<RejectedQueueRouteProps> = (
  props
) => {
  const [disableLoadMore, setDisableLoadMore] = useState(false);

  const loadMore = useCallback(() => {
    if (!props.relay.hasMore() || props.relay.isLoading()) {
      return;
    }

    setDisableLoadMore(true);

    props.relay.loadMore(
      10, // Fetch the next 10 feed items
      (error: any) => {
        setDisableLoadMore(false);

        if (error) {
          // eslint-disable-next-line no-console
          console.error(error);
        }
      }
    );
  }, [props.relay]);

  if (!props.query.viewer) {
    return null;
  }

  const comments = props.query.comments.edges.map(
    (edge: { node: any }) => edge.node
  );

  return (
    <IntersectionProvider>
      <Queue
        settings={props.query.settings}
        viewer={props.query.viewer}
        comments={comments}
        onLoadMore={loadMore}
        hasLoadMore={props.relay.hasMore()}
        disableLoadMore={disableLoadMore}
        danglingLogic={danglingLogic}
        emptyElement={
          <Localized id="moderate-emptyQueue-rejected">
            <EmptyMessage>There are no rejected comments.</EmptyMessage>
          </Localized>
        }
        allStories={!props.storyID}
      />
    </IntersectionProvider>
  );
};

// TODO: (cvle) If this could be autogenerated..
type FragmentVariables = RejectedQueueRoutePaginationQueryVariables;

const enhanced = (withPaginationContainer<
  RejectedQueueRouteProps,
  RejectedQueueRoutePaginationQueryVariables,
  FragmentVariables
>(
  {
    query: graphql`
      fragment RejectedQueueRoute_query on Query
        @argumentDefinitions(
          count: { type: "Int!", defaultValue: 5 }
          cursor: { type: "Cursor" }
          storyID: { type: "ID" }
          siteID: { type: "ID" }
          section: { type: "SectionFilter" }
        ) {
        comments(
          status: REJECTED
          storyID: $storyID
          siteID: $siteID
          section: $section
          first: $count
          after: $cursor
        ) @connection(key: "RejectedQueue_comments") {
          edges {
            node {
              id
              ...ModerateCardContainer_comment
            }
          }
        }
        settings {
          ...ModerateCardContainer_settings
        }
        viewer {
          ...ModerateCardContainer_viewer
        }
      }
    `,
  },
  {
    direction: "forward",
    getConnectionFromProps(props) {
      return props.query && props.query.comments;
    },
    // This is also the default implementation of `getFragmentVariables` if it isn't provided.
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      };
    },
    getVariables(props, { count, cursor }, fragmentVariables) {
      return {
        ...fragmentVariables,
        count,
        cursor,
      };
    },
    query: graphql`
      # Pagination query to be fetched upon calling 'loadMore'.
      # Notice that we re-use our fragment, and the shape of this query matches our fragment spec.
      query RejectedQueueRoutePaginationQuery(
        $storyID: ID
        $siteID: ID
        $section: SectionFilter
        $count: Int!
        $cursor: Cursor
      ) {
        ...RejectedQueueRoute_query
          @arguments(
            storyID: $storyID
            siteID: $siteID
            section: $section
            count: $count
            cursor: $cursor
          )
      }
    `,
  }
)(RejectedQueueRoute) as any) as typeof RejectedQueueRoute;

const renderRouteConfig = ({
  Component,
  props,
  match,
}: {
  Component: any;
  props: any;
  match: any;
}) => {
  if (Component && props) {
    const { storyID, siteID, section } = parseModerationOptions(match);

    return (
      <Component
        query={props}
        storyID={storyID}
        siteID={siteID}
        section={section}
      />
    );
  }
  return <LoadingQueue />;
};

export const routeConfig = {
  Component: enhanced,
  query: resolveModule(graphql`
    query RejectedQueueRouteQuery(
      $storyID: ID
      $siteID: ID
      $section: SectionFilter
    ) {
      ...RejectedQueueRoute_query
        @arguments(storyID: $storyID, siteID: $siteID, section: $section)
    }
  `),
  cacheConfig: { force: true },
  render: renderRouteConfig,
};

export default enhanced;
